WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }

// Width annotations
scalar = { "scalar" }
vector = { "vector" ~  ("of" ~ integer)? }
width = { scalar | vector }

// Type annotations
u8  = { "u8"  }
u16 = { "u16" }
u32 = { "u32" }
u64 = { "u64" }
i8  = { "i8"  }
i16 = { "i16" }
i32 = { "i32" }
i64 = { "i64" }
f32 = { "f32" }
f64 = { "f64" }
integer_primitive = { u8 | u16 | u32 | u64 | i8 | i16 | i32 | i64 }
float_primitive = { f32 | f64 }
primitive = { integer_primitive | float_primitive }

// Numbers can be integers, floating point, negative, etc
unsigned_integer = @{ ASCII_DIGIT+ }
integer = @{ "-"? ~ unsigned_integer ~ integer_primitive? }
float = @{ "-"? ~ unsigned_integer ~ ("." ~ unsigned_integer)? ~ float_primitive? }
number = { integer | float }

// Reserved names
define = _{ "def" }
function = _{ "fn" }
export = _{ "export" }
reserved = _{ define | function | export }

// Symbols can contain any symbol except whitespace, numbers, reserved names, or syntax characters
symbol = @{ !number ~ !reserved ~ (!(WHITESPACE | "(" | ")" | "[" | "]" | ":" | ",") ~ ANY)+ }

// Evaluates to something
value = _{ number | symbol | expression }

// Bind a name
def_expression = _{ define ~ symbol ~ value }

// Create a function
argument = { symbol ~ (":" ~ (primitive | width | (primitive ~ width)))? }
argument_list = { "[" ~ argument ~ ("," ~ argument)* ~ "]" }
fn_expression = _{ function ~ argument_list ~ value+ }

// Export a function
export_symbol = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
export_argument = { export_symbol ~ ":" ~ primitive ~ width }
export_argument_list = { "[" ~ export_argument ~ ("," ~ export_argument)* ~ "]" }
export_expression = _{ export ~ export_symbol ~ export_argument_list ~ value }

// Call a function
call_expression = _{ value+ }

// Expressions are nested in parens
expression = { "(" ~ (def_expression | fn_expression | export_expression | call_expression) ~ ")" }

// A program is just a list of expressions
program = { SOI ~ expression* ~ EOI }
